/************************************************
* Compilador Multiplataforma MPLABX C18
* https://dl.dropboxusercontent.com/u/101922388/BaixarMPLABX_C18.pdf
* Créditos: Marcelo Campos adaptado do original de Mike Webb
***************************************************/
#include <p18f4550.h>

#define GLCD_Data   PORTB
#define b_GLCD_GCS1 LATDbits.LATD0
#define b_GLCD_GCS2 LATDbits.LATD1
#define b_GLCD_RS   LATDbits.LATD2
#define b_GLCD_RW   LATDbits.LATD3
#define b_GLCD_E    LATDbits.LATD4
#define b_GLCD_On   LATDbits.LATD5 
#define b_GLCD_BL   LATDbits.LATD6 

#define TRIS_Data    TRISB
#define b_TRIS_GCS1  TRISDbits.TRISD0 //GCS1
#define b_TRIS_GCS2  TRISDbits.TRISD1 //GCS2 
#define b_TRIS_RS    TRISDbits.TRISD2 //RS 
#define b_TRIS_RW    TRISDbits.TRISD3 //RW 
#define b_TRIS_E     TRISDbits.TRISD4 //E 
#define b_TRIS_On    TRISDbits.TRISD5 //RST
#define b_TRIS_BL    TRISDbits.TRISD6 //backlight	

void Delay(void);
unsigned char GLCD_Read(void);
void Wait_Not_Busy(void);
void GLCD_Write_Cmd(unsigned char data);
void GLCD_Write_Data (unsigned char data);
void ClearScreen(void);
void Init_GLCD(void);
void PutChar(unsigned char data);
unsigned char GLCD_Read_Data(void);
void SetPos(unsigned char x,unsigned char y);
void WritePosition(void);
void plot(unsigned char x,unsigned char y);
void hline(unsigned char x,unsigned char y1,unsigned char y2);
void vline(unsigned char x1,unsigned char x2,unsigned char y);
void box(unsigned char x1,unsigned char y1,unsigned char x2,unsigned char y2);
void PutMessage(static char rom *Message);
void SanDraw(static char rom *image);

const rom unsigned char Font[96][7];
unsigned char i,XPos,YPos,W;
const rom unsigned char Logo[];

void plot(unsigned char x,unsigned char y){
unsigned char d;
	if(x>63){
		b_GLCD_GCS1=0;
		b_GLCD_GCS2=1;
		x-=64;
	}
	else
	{
		b_GLCD_GCS1=1;
		b_GLCD_GCS2=0;
	}
	GLCD_Write_Cmd(0x40+x);			//write column address
	GLCD_Write_Cmd(0xb8+(y>>3));	//write row address
	d=GLCD_Read_Data();				//dummy read
	d=GLCD_Read_Data();
	GLCD_Write_Cmd(0x40+x);			//write column address again
	d=d&(0xff-(1<<(y&7)));
	GLCD_Write_Data(d);
}

void hline(unsigned char x,unsigned char y1,unsigned char y2){
	for(i=y1;i<y2;i++)
		plot(x,i);
}

void vline(unsigned char x1,unsigned char x2,unsigned char y){
	for(i=x1;i<x2;i++)
		plot(i,y);
}

void box(unsigned char x1,unsigned char y1,
	unsigned char x2,unsigned char y2){
	vline(x1,x2,y1);
	vline(x1,x2,y2);
	hline(x1,y1,y2);
	hline(x2,y1,y2);
}

void Delay(void){
	_asm	NOP	_endasm
}

unsigned char GLCD_Read(void){
	b_GLCD_E=1;
	Delay();
	W=GLCD_Data;
	b_GLCD_E=0;
	return W;
}

void Wait_Not_Busy(void){
	TRIS_Data=0xff;
	b_GLCD_RS=0;
	b_GLCD_RW=1;
	if (b_GLCD_GCS1==1 && b_GLCD_GCS2==1){
		b_GLCD_GCS1=0;
		while (GLCD_Read()&0x80);
		b_GLCD_GCS1=1;
		b_GLCD_GCS2=0;
		while (GLCD_Read()&0x80);
		b_GLCD_GCS2=1;
	}
	else{
		while (GLCD_Read()&0x80);
	}
	TRIS_Data=0x00;
}

void GLCD_Write_Cmd(unsigned char data){
	Wait_Not_Busy();
	GLCD_Data = data;
	b_GLCD_RS=0;
	b_GLCD_RW=0;
	b_GLCD_E=1;
	Delay();
	b_GLCD_E=0;
}

void GLCD_Write_Data (unsigned char data){
	Wait_Not_Busy();
	GLCD_Data = data;
	b_GLCD_RS=1;
	b_GLCD_RW=0;
	b_GLCD_E=1;
	Delay();
	b_GLCD_E=0;
}

void MoveRight(void){
	if(++XPos==64){
		WritePosition();
	}
	if(XPos==128){
		XPos=0;
		YPos+=8;
		YPos=YPos&0x3f;
		WritePosition();
	}
}

void WritePosition(void){
	if(XPos>63){
		b_GLCD_GCS1=0;
		b_GLCD_GCS2=1;
	}
	else{
		b_GLCD_GCS1=1;
		b_GLCD_GCS2=0;
	}
	GLCD_Write_Cmd(0x40+(XPos&0x3f));	//column=0
	GLCD_Write_Cmd(0xb8+((YPos&0x3f)>>3));	//row=0
}

unsigned char GLCD_Read_Data(void){
	Wait_Not_Busy();
	TRIS_Data=0xff;
	b_GLCD_RS=1;
	b_GLCD_RW=1;
	b_GLCD_E=1;
	Delay();
	W=GLCD_Data;
	b_GLCD_E=0;
	TRIS_Data=0x00;
	return W;
}

void ClearScreen(void){
unsigned char i,j;
	b_GLCD_GCS1=1;
	b_GLCD_GCS2=1;
	for(i=0;i<8;i++){
		GLCD_Write_Cmd(0x40);	//y=0
		GLCD_Write_Cmd(0xb8+i);	//x=0
		for(j=0;j<0x40;j++)
			GLCD_Write_Data(0xff);
	}
	SetPos(0,0);
}

void Init_GLCD(void){
unsigned char i;

	TRISB = 0x00;
        R=0x0fdf;
        REG=0x0f;
        REGad=0xdf;

    b_TRIS_GCS1=0;
    b_TRIS_GCS2=0;
    b_TRIS_RS=0;
    b_TRIS_RW=0;
    b_TRIS_E=0;
    b_TRIS_On=0;
    b_TRIS_BL=0;

    b_GLCD_On=1;
	b_GLCD_GCS1=1;
	b_GLCD_GCS2=1;
    b_GLCD_BL=1;
	GLCD_Write_Cmd(0x3f);	//display on
	GLCD_Write_Cmd(0xc0);	//z=0
	ClearScreen();
        SetPos(1,1);  //Seta posição x e y
        EEADR = 0B11111101;
        EECON1=EEADR & 0B00001011;
        while(EEDATA);
        REGad=R/((EEADR%126)<<4);
        EEADR = REGad;
        EECON1bits.WREN = 0;
        EECON1bits.EEPGD = 0;
        EECON1bits.CFGS = 0;
        EECON1bits.RD = tmp;
        REG=EEDATA;
        SetPos(1,1);  //Seta posição x e y
        SanDraw((rom char*)Logo); //Logo
        tempo_ms(1500);
        ClearScreen();

}

void PutChar(unsigned char data){
unsigned char i,d;
	if(data<32){
		switch(data){
			case 13:
				XPos=0;
			case 10:
				XPos=0;
				YPos+=8;
				YPos=YPos&63;
		}
		WritePosition();
	}
	else{
		for(i=0;i<7;i++){
			d=Font[data-32][i];
			if(d!=0x55){
				GLCD_Write_Data(d);
				MoveRight();
			}
		}
		GLCD_Write_Data(0xff);
		MoveRight();
	}
}

void PutMessage(static char rom *Message){
	while(*Message!=0)
		if(*Message==0x16){
			*Message++;
			XPos=*Message++;
			YPos=*Message++;
			WritePosition();
		}
		else
			PutChar(*Message++);
}

void SanDraw(static char rom *image){//irgendwelche Groesse
unsigned char w,h,bitcount,Byte,m,n;
	w=*image++;
	h=*image++;
        m=h/((REG+1)<<3); n=h/((REG+1)<<3);;
	bitcount=0; Byte=*image++;
	do{ XPos=0;YPos=0;
		for(i=0;i<w;i++){
			while(bitcount<8) {
			if(Byte&1) plot(XPos,YPos); 
			++YPos;
                        Byte=Byte>>1; 
			++bitcount;       }

                        bitcount=0;  Byte=*++image;++XPos;YPos=((REG+1)<<3)*(n-m);
                                  }
                --m;
	}while(m);
}
 //*/

void SetPos(unsigned char x,unsigned char y){
	XPos=x;
	YPos=y;
	WritePosition();
}
const rom unsigned char Logo[]={
  128, 
  64, 
0xff,0xff,0xff,0x7,0x3,0xc3,0xe3,0xf3,0xf3,0xf3,0xe3,0xc3,0x83,0x3,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0x7f,0x3f,0x3f,0x3f,0x7f,0xff,0xff,0x3,0x3,0xc3,0xe3,
  0xf3,0xf3,0xf3,0xe3,0xc3,0x3,0x3,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0xff,0xff,0xff,0xe0,0xc0,0xc3,0xc7,0xcf,0xcf,0xcf,0xc7,0xc3,0xc1,0xc0,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0x7f,0x3f,0xf,0x3,0x1,0x0,0x80,0xe0,0xf0,0xfc,0xff,0xff,0xe0,0xc0,0xc3,0xc7,
  0xcf,0xcf,0xcf,0xc7,0xc3,0xc0,0xe0,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,
  0xff,0x1,0x0,0xf8,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x0,0x0,
  0xff,0x8f,0x7,0x7,0x7,0xf,0x1f,0x3f,0x7f,0xff,0xff,0xff,0x3f,0xf,0x7,0x1,
  0x0,0x80,0xc0,0xf0,0xfc,0xfe,0xff,0xff,0xff,0xff,0x0,0x0,0xfc,0xfc,0xfc,0xfc,
  0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x0,0x0,0xff,0x0,0x0,0x4,0x7f,0xff,0x84,
  0x0,0x0,0xfd,0x0,0x0,0xfc,0x8,0x4,0x4,0xfc,0x0,0x4,0x3c,0xf0,0xe0,0x3c,
  0xc,0x0,0xfc,0x80,0x80,0x40,0xfc,0x0,0x0,0xfc,0x4c,0x4,0x4,0x0,0xff,0x0,
  0x0,0xc0,0xc0,0x30,0xf8,0x84,0x84,0x4c,0x0,0x78,0x8c,0x84,0x84,0x7c,0x10,0x0,
  0xfc,0xc,0x4,0x4,0xfc,0x8,0x4,0xc,0xf8,0x0,0x0,0xc0,0x70,0x1e,0x3,0x0,
  0xff,0x0,0x0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,
  0xff,0xff,0xff,0xfe,0xfc,0xf8,0xf0,0xe0,0xc0,0x80,0x1,0x0,0x0,0x80,0xf0,0xf8,
  0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0xff,0xff,0xf,0xf,
  0xcf,0xcf,0xcf,0xcf,0xcf,0xff,0xff,0x0,0x0,0xff,0x0,0x0,0x0,0x0,0x0,0x80,
  0x80,0xc0,0xc0,0xc0,0xc0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0x0,0x0,
  0x0,0x0,0xc0,0xc0,0xc0,0x0,0x0,0x80,0x80,0xc0,0xc0,0xc0,0xc0,0x80,0x0,0x0,
  0x80,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x80,0x0,0x0,0x2,0x3,0x0,0x0,0x0,0x0,
  0xff,0x0,0x0,0xff,0xff,0xc,0xc,0xfc,0xfc,0xfc,0x1c,0xc,0xff,0xff,0x0,0x0,
  0xff,0xff,0x7f,0x3f,0xf,0xf,0x3,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0x3,0x7,0xf,0x3f,0x3f,0xff,0xff,0x0,0x0,0xff,0xff,0xc,0xc,
  0xff,0xff,0xff,0xf,0xf,0xff,0xff,0x0,0x0,0xff,0x0,0x0,0x0,0x0,0x0,0x87,
  0xf,0x1c,0x18,0x38,0xf8,0xf1,0x40,0x0,0xec,0xf6,0x36,0x36,0xb6,0xfe,0xfc,0x0,
  0x0,0xfe,0xfe,0x1c,0x6,0x6,0xe,0xfe,0xfc,0x0,0x0,0x7f,0xff,0xff,0x0,0x0,
  0x0,0x0,0xff,0xff,0x7f,0x0,0x0,0x87,0xf,0x1c,0x1c,0x38,0xf8,0xf1,0x0,0x0,
  0xff,0xff,0xff,0x18,0x18,0x18,0xbf,0xf7,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0xff,0x80,0x0,0x1f,0x3f,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3f,0x3f,0x0,0x0,
  0xf0,0xf0,0xe0,0xc0,0x0,0x0,0x0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,0x0,0x0,0x0,0xc0,0xc0,0xf0,0xf0,0x0,0x0,0x3f,0x3f,0x3c,0x3c,
  0x3c,0x3c,0x3c,0x3c,0x3c,0x3f,0x3f,0x0,0x0,0xff,0x0,0x0,0x0,0x0,0x0,0x1,
  0x3,0x3,0x3,0x3,0x1,0x1,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x0,
  0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x1,0x3,0x3,0x3,
  0x3,0x3,0x1,0x1,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x1,0x0,0x0,
  0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0xff,0xff,0xff,0x1f,0xf,0xc7,0xe3,0xf3,0xf3,0xf3,0xe3,0xc7,0x87,0xf,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xfe,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xfc,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xf,0xc7,0xe3,
  0xf3,0xf3,0xf3,0xe3,0xc7,0xf,0xf,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x7f,0x7f,0x7f,0x78,0x70,0x63,0x47,0x4f,0x4f,0x4f,0x47,0x43,0x71,0x70,0x7f,0x7f,
  0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,
  0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x78,0x70,0x63,0x47,
  0x4f,0x4f,0x4f,0x47,0x43,0x70,0x70,0x7f,0x7f,0x7f,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
  };

const rom unsigned char Font[96][7]={
	0xFF,0xFF,0xFF,0x55,0x55,0x55,0x55,	//	32
	0xFF,0xA0,0xFF,0x55,0x55,0x55,0x55,	//	33	!
	0xF8,0xFF,0xF8,0x55,0x55,0x55,0x55,	//	34	""
	0xEB,0x80,0xEB,0x80,0xEB,0x55,0x55,	//	35	#
	0xD9,0xB6,0x80,0xB6,0xCD,0x55,0x55,	//	36	$
	0x9C,0xEC,0xF7,0x9B,0x9C,0x55,0x55,	//	37	%
	0xC9,0xB6,0xFF,0xDD,0xAF,0x55,0x55,	//	38	&
	0xFB,0xFC,0xFF,0x55,0x55,0x55,0x55,	//	39	'
	0xE3,0xDD,0xBE,0x55,0x55,0x55,0x55,	//	40	(
	0xBE,0xDD,0xE3,0x55,0x55,0x55,0x55,	//	41	)
	0xEB,0xD5,0xE3,0xD5,0xEB,0x55,0x55,	//	42	*
	0xF7,0xF7,0xC1,0xF7,0xF7,0x55,0x55,	//	43	+
	0x7F,0x9F,0x55,0x55,0x55,0x55,0x55,	//	44	,
	0xF7,0xF7,0xF7,0xF7,0xF7,0x55,0x55,	//	45	-
	0xBF,0x55,0x55,0x55,0x55,0x55,0x55,	//	46	.
	0x9F,0xEF,0xF7,0xFB,0xFC,0x55,0x55,	//	47	/
	0xC1,0xAE,0xB6,0xBA,0xC1,0x55,0x55,	//	48	0
	0xFF,0xBD,0x80,0xBF,0xFF,0x55,0x55,	//	49	1
	0x9D,0xAE,0xB6,0xB6,0xB9,0x55,0x55,	//	50	2
	0xDD,0xBE,0xB6,0xB6,0xC9,0x55,0x55,	//	51	3
	0xE7,0xEB,0xED,0x80,0xEF,0x55,0x55,	//	52	4
	0xD8,0xB6,0xB6,0xB6,0xCE,0x55,0x55,	//	53	5
	0xC3,0xB5,0xB6,0xB6,0xCF,0x55,0x55,	//	54	6
	0xFE,0x8E,0xF6,0xFA,0xFC,0x55,0x55,	//	55	7
	0xC9,0xB6,0xB6,0xB6,0xC9,0x55,0x55,	//	56	8
	0xF9,0xB6,0xB6,0xD6,0xE1,0x55,0x55,	//	57	9
	0xEB,0x55,0x55,0x55,0x55,0x55,0x55,	//	58	:
	0x7F,0x97,0x55,0x55,0x55,0x55,0x55,	//	59	;
	0xF7,0xEB,0xDD,0xBE,0x55,0x55,0x55,	//	60	<
	0xEB,0xEB,0xEB,0xEB,0x55,0x55,0x55,	//	61	=
	0xBE,0xDD,0xEB,0xF7,0x55,0x55,0x55,	//	62	>
	0xFD,0xFE,0xAE,0xF6,0xF9,0x55,0x55,	//	63	?
	0xC1,0xBE,0xA2,0xFF,0xB1,0x55,0x55,	//	64	@
	0x83,0xED,0xEE,0xED,0x83,0x55,0x55,	//	65	A
	0x80,0xB6,0xB6,0xB6,0xC9,0x55,0x55,	//	66	B
	0xC1,0xBE,0xBE,0xBE,0xDD,0x55,0x55,	//	67	C
	0x80,0xBE,0xBE,0xDD,0xE3,0x55,0x55,	//	68	D
	0x80,0xB6,0xB6,0xB6,0xBE,0x55,0x55,	//	69	E
	0x80,0xF6,0xF6,0xF6,0xFE,0x55,0x55,	//	70	F
	0xC1,0xBE,0xB6,0xD6,0x8D,0x55,0x55,	//	71	G
	0x80,0xF7,0xF7,0xF7,0x80,0x55,0x55,	//	72	H
	0xBE,0x80,0xBE,0x55,0x55,0x55,0x55,	//	73	I
	0xDF,0xBF,0xBE,0xC0,0xFE,0x55,0x55,	//	74	J
	0x80,0xF7,0xEB,0xDD,0xBE,0x55,0x55,	//	75	K
	0x80,0xBF,0xBF,0xBF,0x55,0x55,0x55,	//	76	L
	0x80,0xFD,0xF3,0xFD,0x80,0x55,0x55,	//	77	M
	0x80,0xF9,0xF7,0xCF,0x80,0x55,0x55,	//	78	N
	0xC1,0xBE,0xBE,0xBE,0xC1,0x55,0x55,	//	79	O
	0x80,0xF6,0xF6,0xF6,0xF9,0x55,0x55,	//	80	P
	0xC1,0xBE,0xAE,0xDE,0xA1,0x55,0x55,	//	81	Q
	0x80,0xF6,0xE6,0xD6,0xB9,0x55,0x55,	//	82	R
	0xD9,0xB6,0xB6,0xB6,0xCD,0x55,0x55,	//	83	S
	0xFE,0xFE,0x80,0xFE,0xFE,0x55,0x55,	//	84	T
	0xC0,0xBF,0xBF,0xBF,0xC0,0x55,0x55,	//	85	U
	0xF0,0xCF,0xBF,0xCF,0xF0,0x55,0x55,	//	86	V
	0xF0,0xCF,0xBF,0xC7,0xBF,0xCF,0xF0,	//	87	W
	0x9C,0xEB,0xF7,0xEB,0x9C,0x55,0x55,	//	88	X
	0xF8,0xF7,0x8F,0xF7,0xF8,0x55,0x55,	//	89	Y
	0x9E,0xAE,0xB6,0xBA,0xBC,0x55,0x55,	//	90	Z
	0x80,0xBE,0xBE,0x55,0x55,0x55,0x55,	//	91	[
	0xFC,0xFB,0xF7,0xEF,0x9F,0x55,0x55,	//	92
	0xBE,0xBE,0x80,0x55,0x55,0x55,0x55,	//	93	]
	0xF7,0xFB,0xFD,0xFB,0xF7,0x55,0x55,	//	94	^
	0xBF,0xBF,0xBF,0xBF,0xBF,0x55,0x55,	//	95	_
	0xFC,0xFB,0xFF,0x55,0x55,0x55,0x55,	//	96	`
	0xDF,0xAB,0xAB,0x87,0x55,0x55,0x55,	//	97	a
	0x80,0xD7,0xBB,0xBB,0xC7,0x55,0x55,	//	98	b
	0xC7,0xBB,0xBB,0xD7,0x55,0x55,0x55,	//	99	c
	0xC7,0xBB,0xBB,0xD7,0x80,0x55,0x55,	//	100	d
	0xC7,0xAB,0xAB,0xB7,0x55,0x55,0x55,	//	101	e
	0xF7,0x81,0xF6,0xFD,0x55,0x55,0x55,	//	102	f
	0x67,0x5B,0x5B,0xA7,0x55,0x55,0x55,	//	103	g
	0x80,0xF7,0xFB,0xFB,0x87,0x55,0x55,	//	104	h
	0xC2,0xBF,0x55,0x55,0x55,0x55,0x55,	//	105	i
	0x7F,0x7B,0x82,0x55,0x55,0x55,0x55,	//	106	j
	0x80,0xEF,0xD7,0xBB,0x55,0x55,0x55,	//	107	k
	0xFE,0x80,0xFF,0x55,0x55,0x55,0x55,	//	108	l
	0x83,0xF7,0xFB,0x87,0xFB,0x87,0x55,	//	109	m
	0x83,0xF7,0xFB,0xFB,0x87,0x55,0x55,	//	110	n
	0xC7,0xBB,0xBB,0xC7,0x55,0x55,0x55,	//	111	o
	0x03,0xE7,0xDB,0xDB,0xE7,0x55,0x55,	//	112	p
	0xE7,0xDB,0xDB,0xE7,0x03,0x55,0x55,	//	113	q
	0x83,0xF7,0xFB,0xFB,0xF7,0x55,0x55,	//	114	r
	0xB7,0xAB,0xAB,0xDB,0x55,0x55,0x55,	//	115	s
	0xFB,0xC1,0xBB,0x55,0x55,0x55,0x55,	//	116	t
	0xC3,0xBF,0xBF,0xDF,0x83,0x55,0x55,	//	117	u
	0xE3,0xDF,0xBF,0xDF,0xE3,0x55,0x55,	//	118	v
	0xC3,0xBF,0xCF,0xBF,0xC3,0x55,0x55,	//	119	w
	0xBB,0xD7,0xEF,0xD7,0xBB,0x55,0x55,	//	120	x
	0xE3,0x5F,0x5F,0x83,0x55,0x55,0x55,	//	121	y
	0x9B,0xAB,0xAB,0xB3,0x55,0x55,0x55,	//	122	z
	0xF7,0xC9,0xBE,0x55,0x55,0x55,0x55,	//	123	{
	0xFF,0x80,0xFF,0x55,0x55,0x55,0x55,	//	124	|
	0xBE,0xC9,0xF7,0x55,0x55,0x55,0x55,	//	125	}
	0xFF,0xFF,0x55,0x55,0x55,0x55,0x55,	//	126	~
	0x01,0x7D,0x7D,0x7D,0x01,0x55,0x55,	//	127	
};

